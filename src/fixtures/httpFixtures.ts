import { AxiosResponse } from 'axios';

interface ExtendedResponseError extends AxiosResponse<any> {
  text: string;
  method: string;
  path: string;
}

export const basicResponseError: ExtendedResponseError = {
  data: {},
  headers: {},
  config: {},
  statusText: '',
  status: 200,
  text: 'OK',
  method: 'GET',
  path: '/',
};

const xmlHttpRequest: XMLHttpRequest = {
  onreadystatechange: jest.fn(),
  readyState: 1,
  response: {},
  responseText: 'OK',
  responseType: 'json',
  responseURL: '/',
  responseXML: null,
  status: 200,
  statusText: 'OK',
  timeout: 0,
  upload: {
    onabort: jest.fn(),
    onerror: jest.fn(),
    onload: jest.fn(),
    onloadend: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    onloadstart: jest.fn(),
    onprogress: jest.fn(),
    ontimeout: jest.fn(),
    dispatchEvent: jest.fn(),
  },
  withCredentials: true,
  abort: jest.fn(),
  getAllResponseHeaders: jest.fn(),
  getResponseHeader: jest.fn(),
  open: jest.fn(),
  overrideMimeType: jest.fn(),
  send: jest.fn(),
  setRequestHeader: jest.fn(),
  DONE: 1,
  HEADERS_RECEIVED: 1,
  LOADING: 1,
  OPENED: 1,
  UNSENT: 1,
  onabort: jest.fn(),
  onerror: jest.fn(),
  onload: jest.fn(),
  onloadend: jest.fn(),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  onloadstart: jest.fn(),
  onprogress: jest.fn(),
  ontimeout: jest.fn(),
  dispatchEvent: jest.fn(),
};

export const basicResponse = {
  addListener: jest.fn(),
  on: jest.fn(),
  once: jest.fn(),
  removeListener: jest.fn(),
  off: jest.fn(),
  removeAllListeners: jest.fn(),
  setMaxListeners: jest.fn(),
  getMaxListeners: jest.fn(),
  listeners: jest.fn(),
  rawListeners: jest.fn(),
  emit: jest.fn(),
  listenerCount: jest.fn(),
  prependListener: jest.fn(),
  prependOnceListener: jest.fn(),
  eventNames: jest.fn(),
  readable: true,
  read: jest.fn(),
  setEncoding: jest.fn(),
  pause: jest.fn(),
  resume: jest.fn(),
  isPaused: jest.fn(),
  pipe: jest.fn(),
  unpipe: jest.fn(),
  unshift: jest.fn(),
  wrap: jest.fn(),
  [Symbol.asyncIterator]: jest.fn(),
  accepted: true,
  badRequest: true,
  body: {},
  charset: 'UTF-8',
  clientError: true,
  error: basicResponseError,
  files: [],
  forbidden: true,
  get: jest.fn(),
  header: {},
  info: true,
  links: {},
  noContent: true,
  notAcceptable: true,
  notFound: true,
  ok: true,
  redirect: true,
  serverError: true,
  status: 200,
  statusType: 200,
  text: '',
  type: '',
  unauthorized: true,
  xhr: xmlHttpRequest,
  redirects: [],
};
