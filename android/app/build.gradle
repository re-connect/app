apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

project.ext.react = [
    enableHermes: true,
    entryFile: "index.js",
    bundleAssetName: "index.android.bundle",
    bundleInDebug: true,
    bundleInRelease: true
]

project.ext.envConfigFiles = [
    local: ".env.debug",
    preprod: '.env.preprod',
    prod: '.env.prod',
]


// apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false);

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
    //
    // Bundle with Expo CLI
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

android {
    namespace "com.reconnect.CloudSolidaire"
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    flavorDimensions "version"

    defaultConfig {
        applicationId "com.reconnect.CloudSolidaire"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true // ADD THIS LINE
        versionCode project.env.get("ANDROID_VERSION_CODE") as Integer
        versionName project.env.get("ANDROID_VERSION_NAME")
        resValue "string", "build_config_package", project.env.get("GRADLE_APP_IDENTIFIER")
        resValue "string", "app_name", project.env.get("APP_NAME")
    }

    signingConfigs {
        debug {
            storeFile file(project.env.get("GRADLE_KEYSTORE"))
            storePassword project.env.get("GRADLE_KEYSTORE_PASSWORD")
            keyAlias project.env.get("GRADLE_KEYSTORE_ALIAS")
            keyPassword project.env.get("GRADLE_KEYSTORE_PASSWORD")
        }
    }

    productFlavors {
      prod {
        applicationIdSuffix ".prod"
      }
      preprod {
        applicationIdSuffix ".preprod"
      }
      local {
        applicationIdSuffix ".debug"
      }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")
    implementation project(':react-native-splash-screen')
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
